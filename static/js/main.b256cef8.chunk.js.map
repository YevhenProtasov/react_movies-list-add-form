{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/TextField/TextField.tsx","components/NewMovie/NewMovie.tsx","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","TextField","name","value","label","placeholder","required","onChange","validation","useState","Math","random","toFixed","slice","id","touched","setTouched","hasError","trim","isValid","setIsValid","htmlFor","type","classNames","onBlur","NewMovie","onAdd","count","setCount","newMovie","setNewMovie","pattern","str","test","isDisabled","handleChange","e","target","prevMovie","onSubmit","preventDefault","prev","disabled","App","moviesFromServer","setMovie","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b256cef8.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movie-card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ninterface Props {\n  movies: Movie[];\n}\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import classNames from 'classnames';\nimport React, { useState } from 'react';\n\ntype Props = {\n  name: string,\n  value: string,\n  label?: string,\n  placeholder?: string,\n  required?: boolean,\n  onChange?: (newValue: React.ChangeEvent<HTMLInputElement>) => void,\n  validation?: (str: string) => boolean;\n};\n\nfunction getRandomDigits() {\n  return Math.random()\n    .toFixed(16)\n    .slice(2);\n}\n\nexport const TextField: React.FC<Props> = ({\n  name,\n  value,\n  label = name,\n  placeholder = `Enter ${label}`,\n  required = false,\n  onChange = () => {},\n  validation,\n}) => {\n  // generage a unique id once on component load\n  const [id] = useState(() => `${name}-${getRandomDigits()}`);\n\n  // To show errors only if the field was touched (onBlur)\n  const [touched, setTouched] = useState(false);\n  const hasError = touched && required && !(value.trim());\n\n  const [isValid, setIsValid] = useState(true);\n\n  const handleBlur = () => {\n    setTouched(true);\n    setIsValid(true);\n\n    if (validation && value !== '') {\n      setIsValid(validation(value));\n    }\n  };\n\n  return (\n    <div className=\"field\">\n      <label className=\"label\" htmlFor={id}>\n        {label}\n      </label>\n\n      <div className=\"control\">\n        <input\n          name={name}\n          type=\"text\"\n          id={id}\n          data-cy={`movie-${name}`}\n          className={classNames('input', {\n            'is-danger': hasError || !isValid,\n          })}\n          placeholder={placeholder}\n          value={value}\n          onChange={onChange}\n          onBlur={handleBlur}\n        />\n      </div>\n\n      {hasError && isValid && (\n        <p className=\"help is-danger\">{`${label} is required`}</p>\n      )}\n      {!isValid && (\n        <p className=\"help is-danger\">Invalid URL</p>\n      )}\n    </div>\n  );\n};\n","import { useState } from 'react';\nimport { TextField } from '../TextField';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  onAdd: (newMovie: Movie) => void;\n};\n\nexport const NewMovie: React.FC<Props> = ({ onAdd }) => {\n  // Increase the count after successful form submission\n  // to reset touched status of all the `Field`s\n  const [count, setCount] = useState(0);\n\n  const [newMovie, setNewMovie] = useState({\n    title: '',\n    description: '',\n    imgUrl: '',\n    imdbUrl: '',\n    imdbId: '',\n  });\n\n  // eslint-disable-next-line\n  const pattern = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@,.\\w_]*)#?(?:[,.!/\\\\\\w]*))?)$/;\n\n  const validation = (str: string) => {\n    return pattern.test(str);\n  };\n\n  let isDisabled = true;\n\n  if (newMovie.title.trim()\n    && validation(newMovie.imgUrl.trim())\n    && validation(newMovie.imdbUrl.trim())\n    && newMovie.imdbId.trim()) {\n    isDisabled = false;\n  }\n\n  const resetForm = () => {\n    setNewMovie({\n      title: '',\n      description: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n    });\n  };\n\n  const handelSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n\n    onAdd(newMovie);\n\n    setCount(prev => prev + 1);\n\n    resetForm();\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const { name, value } = e.target;\n\n    setNewMovie((prevMovie) => ({ ...prevMovie, [name]: value }));\n  };\n\n  return (\n    <form\n      className=\"NewMovie\"\n      key={count}\n      onSubmit={handelSubmit}\n    >\n      <h2 className=\"title\">Add a movie</h2>\n\n      <TextField\n        name=\"title\"\n        label=\"Title\"\n        value={newMovie.title}\n        onChange={handleChange}\n        required\n      />\n\n      <TextField\n        name=\"description\"\n        label=\"Description\"\n        value={newMovie.description}\n        onChange={handleChange}\n      />\n\n      <TextField\n        name=\"imgUrl\"\n        label=\"Image URL\"\n        value={newMovie.imgUrl}\n        onChange={handleChange}\n        validation={validation}\n        required\n      />\n\n      <TextField\n        name=\"imdbUrl\"\n        label=\"Imdb URL\"\n        value={newMovie.imdbUrl}\n        onChange={handleChange}\n        validation={validation}\n        required\n      />\n\n      <TextField\n        name=\"imdbId\"\n        label=\"Imdb ID\"\n        value={newMovie.imdbId}\n        onChange={handleChange}\n        required\n      />\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            data-cy=\"submit-button\"\n            className=\"button is-link\"\n            disabled={isDisabled}\n          >\n            Add\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movie, setMovie] = useState<Movie[]>(moviesFromServer);\n\n  const onAdd = (newMovie: Movie) => {\n    setMovie(prev => [...prev, newMovie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movie} />\n      </div>\n      <div className=\"sidebar\">\n        <NewMovie onAdd={onAdd} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}